from aiogram import types
from aiogram.filters import Command
import structlog
from config import get_llm_config, get_openrouter_keys, get_system_prompt
from llm.client import create_client, format_messages, generate_response

logger = structlog.get_logger()

# –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ (chat_id -> list)
user_histories = {}

async def register_handlers(dp):
    @dp.message(Command("start"))
    async def start_handler(message: types.Message):
        logger.info("start_command", chat_id=message.chat.id)
        user_histories[message.chat.id] = []
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø LLMstart Assistant.\n\n"
            "–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò.\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
            "‚Ä¢ –î–∏–∞–ª–æ–≥ —Å –ò–ò (–¥–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏)\n"
            "‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
        )

    @dp.message(Command("help"))
    async def help_handler(message: types.Message):
        await message.answer(
            "‚ÑπÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ LLMstart Assistant:\n\n"
            "‚Äî –û—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é LLM\n"
            "‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–∏–∞–ª–æ–≥–∞ (–¥–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏)\n"
            "‚Äî –ë—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
        )

    @dp.message()
    async def llm_handler(message: types.Message):
        chat_id = message.chat.id
        text = message.text
        if not text:
            return
        # –ò—Å—Ç–æ—Ä–∏—è
        history = user_histories.get(chat_id, [])
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        system_prompt = get_system_prompt()
        messages = format_messages(history, text, system_prompt)
        # LLM config
        llm_config = get_llm_config()
        keys = get_openrouter_keys()
        client = create_client(keys["api_key"], keys["base_url"])
        try:
            logger.info("llm_request", chat_id=chat_id, prompt=text)
            response = generate_response(client, messages, llm_config)
            await message.answer(response)
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
            history.append({"role": "user", "content": text})
            history.append({"role": "assistant", "content": response})
            user_histories[chat_id] = history[-5:]
        except Exception as e:
            logger.error("llm_error", chat_id=chat_id, error=str(e))
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å")