---
alwaysApply: true
---

# Правила разработки кода

## Основные принципы

**KISS (Keep It Simple, Stupid):**
- Минимальный функционал для проверки идеи
- Простые решения вместо сложных архитектур
- Отсутствие оверинжиниринга

**Архитектурные принципы:**
- Функциональный подход (только функции, без ООП)
- Данные в простых структурах (dict/list) в памяти
- Один файл = одна ответственность

## Структура кода

**Функции:**
- Docstring для каждой функции
- Максимум 3 уровня вложенности
- Максимум 50 строк на функцию

**Файлы:**
- Один файл = одна ответственность
- Максимум 300 строк на файл
- Четкое разделение по модулям (см. @vision.md)

## Подход к разработке

**TDD:**
- Сначала тест, потом код
- Тесты для всех публичных функций
- Рефакторинг после каждого рабочего этапа

**Данные:**
- Простые dict/list структуры
- Все данные в памяти
- Конфигурация через config.py

## Логирование

**Структурированное логирование:**
```python
import structlog
logger = structlog.get_logger()
logger.info("event", chat_id=123, data=data)
```

**Логируемые события:**
- Старт/остановка бота
- Запросы к LLM и ответы
- Ошибки и исключения

## Конфигурация

**Принципы:**
- Все настройки в .env файле
- Валидация конфигурации при старте
- Без хардкода в коде
- Использование config.py для доступа к настройкам

## Обработка ошибок

**Принципы:**
- Таймаут запросов: 30 секунд
- При ошибках - отправка сообщения пользователю
- Логирование всех ошибок для анализа
- Graceful degradation

## Технологии

**Соблюдать версии из @vision.md:**
- Python 3.11+
- aiogram 3.x
- uv для управления зависимостями
- structlog для логирования
- pydantic для валидации

## Структура проекта

**Следовать структуре из @vision.md:**
- bot/handlers.py - обработчики Telegram бота
- llm/client.py - клиент для работы с LLM
- config.py - конфигурация приложения
- main.py - точка входа
- tests/ - все тесты

## Модель данных

**Использовать структуры из @vision.md:**
- user_history для истории диалога
- llm_config для конфигурации LLM
- bot_config для конфигурации бота

## Деплой

**Docker:**
- Один контейнер с Python приложением
- Конфигурация через переменные окружения
- Использование Make для автоматизации
# Правила разработки кода

## Основные принципы

**KISS (Keep It Simple, Stupid):**
- Минимальный функционал для проверки идеи
- Простые решения вместо сложных архитектур
- Отсутствие оверинжиниринга

**Архитектурные принципы:**
- Функциональный подход (только функции, без ООП)
- Данные в простых структурах (dict/list) в памяти
- Один файл = одна ответственность

## Структура кода

**Функции:**
- Docstring для каждой функции
- Максимум 3 уровня вложенности
- Максимум 50 строк на функцию

**Файлы:**
- Один файл = одна ответственность
- Максимум 300 строк на файл
- Четкое разделение по модулям (см. @vision.md)

## Подход к разработке

**TDD:**
- Сначала тест, потом код
- Тесты для всех публичных функций
- Рефакторинг после каждого рабочего этапа

**Данные:**
- Простые dict/list структуры
- Все данные в памяти
- Конфигурация через config.py

## Логирование

**Структурированное логирование:**
```python
import structlog
logger = structlog.get_logger()
logger.info("event", chat_id=123, data=data)
```

**Логируемые события:**
- Старт/остановка бота
- Запросы к LLM и ответы
- Ошибки и исключения

## Конфигурация

**Принципы:**
- Все настройки в .env файле
- Валидация конфигурации при старте
- Без хардкода в коде
- Использование config.py для доступа к настройкам

## Обработка ошибок

**Принципы:**
- Таймаут запросов: 30 секунд
- При ошибках - отправка сообщения пользователю
- Логирование всех ошибок для анализа
- Graceful degradation

## Технологии

**Соблюдать версии из @vision.md:**
- Python 3.11+
- aiogram 3.x
- uv для управления зависимостями
- structlog для логирования
- pydantic для валидации

## Структура проекта

**Следовать структуре из @vision.md:**
- bot/handlers.py - обработчики Telegram бота
- llm/client.py - клиент для работы с LLM
- config.py - конфигурация приложения
- main.py - точка входа
- tests/ - все тесты

## Модель данных

**Использовать структуры из @vision.md:**
- user_history для истории диалога
- llm_config для конфигурации LLM
- bot_config для конфигурации бота

## Деплой

**Docker:**
- Один контейнер с Python приложением
- Конфигурация через переменные окружения
- Использование Make для автоматизации
